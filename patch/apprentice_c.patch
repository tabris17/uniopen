diff --git a/src/apprentice.c b/src/apprentice.c
index 2745650b..7d109d82 100644
--- a/src/apprentice.c
+++ b/src/apprentice.c
@@ -55,8 +55,10 @@ FILE_RCSID("@(#)$File: apprentice.c,v 1.364 2025/01/28 13:05:55 christos Exp $")
 #endif
 #ifdef HAVE_SYS_BSWAP_H
 #include <sys/bswap.h>
 #endif
+#include <windows.h>
+#include "uniopen.h"
 
 
 #define	EATAB {while (*l && isascii(CAST(unsigned char, *l)) && \
 		      isspace(CAST(unsigned char, *l)))  ++l;}
@@ -3327,9 +3329,9 @@ apprentice_map(struct magic_set *ms, const char *fn)
 	dbname = mkdbname(ms, fn, 0);
 	if (dbname == NULL)
 		goto error;
 
-	if ((fd = open(dbname, O_RDONLY|O_BINARY)) == -1)
+	/*if ((fd = open(dbname, O_RDONLY|O_BINARY)) == -1)
 		goto error;
 
 	if (fstat(fd, &st) == -1) {
 		file_error(ms, errno, "cannot stat `%s'", dbname);
@@ -3360,19 +3362,39 @@ apprentice_map(struct magic_set *ms, const char *fn)
 		goto error;
 	}
 #endif
 	(void)close(fd);
-	fd = -1;
-
+	fd = -1;*/
+	HINSTANCE instance = GetModuleHandle(NULL);
+    HRSRC res = FindResourceW(instance, MAKEINTRESOURCEW(IDR_MAGIC), L"MAGIC");
+    if (!res) {
+        file_error(ms, GetLastError(), "cannot find magic resource");
+        goto error;
+    }
+
+    HGLOBAL res_data = LoadResource(instance, res);
+    if (!res_data) {
+        file_error(ms, GetLastError(), "cannot load magic resource");
+        goto error;
+    }
+
+    map->len = CAST(size_t, SizeofResource(instance, res));
+    map->type = MAP_TYPE_MALLOC;
+	if ((map->p = CAST(void *, malloc(map->len))) == NULL) {
+		file_oomem(ms, map->len);
+		goto error;
+	}
+	memcpy(map->p, (void *)LockResource(res_data), map->len);
+	
 	if (check_buffer(ms, map, dbname) != 0) {
 		goto error;
 	}
-#ifdef QUICK
+/*#ifdef QUICK
 	if (mprotect(map->p, CAST(size_t, st.st_size), PROT_READ) == -1) {
 		file_error(ms, errno, "cannot mprotect `%s'", dbname);
 		goto error;
 	}
-#endif
+#endif*/
 
 	free(dbname);
 	return map;
 
